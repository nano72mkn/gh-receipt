#!/usr/bin/env bash
set -e

# ヘルプ表示
show_help() {
    cat << EOF
Usage: gh-receipt [USERNAME] [OPTIONS]

GitHub の活動レシートを美しく表示します

Options:
  -h, --help      このヘルプを表示
  -d, --days N    過去N日間のデータを表示 (デフォルト: 30)
  -w, --weekly    過去7日間のデータを表示
  -m, --monthly   過去30日間のデータを表示
  -y, --yearly    過去365日間のデータを表示
  --diff          前期間との比較を表示
  --public        公開リポジトリのみ表示（プライベートを除外）

Examples:
  gh-receipt                    # 自分の過去30日間の活動
  gh-receipt nano72mkn          # 特定ユーザーの過去30日間
  gh-receipt -w                 # 自分の過去7日間
  gh-receipt nano72mkn --weekly # 特定ユーザーの過去7日間
  gh-receipt -w --diff          # 今週vs先週の比較
  gh-receipt -m --diff          # 今月vs先月の比較
  gh-receipt --public           # 公開リポジトリのみ（SNS投稿用）
EOF
}

# デフォルト値
USERNAME=""
DAYS=30
SHOW_DIFF=false
PUBLIC_ONLY=false

# 引数解析
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -w|--weekly)
            DAYS=7
            shift
            ;;
        -m|--monthly)
            DAYS=30
            shift
            ;;
        -y|--yearly)
            DAYS=365
            shift
            ;;
        -d|--days)
            DAYS="$2"
            shift 2
            ;;
        --diff)
            SHOW_DIFF=true
            shift
            ;;
        --public)
            PUBLIC_ONLY=true
            shift
            ;;
        -*)
            echo "エラー: 不明なオプション: $1"
            echo "詳細は gh-receipt --help を参照してください"
            exit 1
            ;;
        *)
            if [ -z "$USERNAME" ]; then
                USERNAME="$1"
            fi
            shift
            ;;
    esac
done

# ユーザー名が指定されていない場合は現在のユーザーを使用
if [ -z "$USERNAME" ]; then
    USERNAME=$(gh api user -q .login 2>/dev/null || echo "")
    if [ -z "$USERNAME" ]; then
        echo "エラー: ユーザー名を指定するか、gh auth login でログインしてください"
        exit 1
    fi
fi

# 色の定義（レシート風にモノクロメイン）
DIM='\033[2m'
BOLD='\033[1m'
GREEN='\033[32m'
RED='\033[31m'
NC='\033[0m'

# 日付計算（macOS と Linux の両方に対応）
if date -v -1d >/dev/null 2>&1; then
    # macOS
    FROM_DATE=$(date -v-${DAYS}d -u +%Y-%m-%dT%H:%M:%SZ)
    TODAY=$(date +%Y-%m-%d)
    CURRENT_TIME=$(date "+%Y/%m/%d %H:%M:%S")
    
    # 前期間の日付計算
    if [ "$SHOW_DIFF" = true ]; then
        PREV_FROM_DATE=$(date -v-$((DAYS * 2))d -u +%Y-%m-%dT%H:%M:%SZ)
        PREV_TO_DATE=$(date -v-$((DAYS + 1))d -u +%Y-%m-%dT%H:%M:%SZ)
    fi
else
    # Linux
    FROM_DATE=$(date -u -d "${DAYS} days ago" +%Y-%m-%dT%H:%M:%SZ)
    TODAY=$(date +%Y-%m-%d)
    CURRENT_TIME=$(date "+%Y/%m/%d %H:%M:%S")
    
    # 前期間の日付計算
    if [ "$SHOW_DIFF" = true ]; then
        PREV_FROM_DATE=$(date -u -d "$((DAYS * 2)) days ago" +%Y-%m-%dT%H:%M:%SZ)
        PREV_TO_DATE=$(date -u -d "$((DAYS + 1)) days ago" +%Y-%m-%dT%H:%M:%SZ)
    fi
fi

echo -e "${DIM}データ取得中...${NC}"

# 現在期間のデータ取得
get_period_data() {
    local from=$1
    local to=$2
    
    gh api graphql -f query='
      query($username: String!, $from: DateTime!, $to: DateTime!) {
        user(login: $username) {
          contributionsCollection(from: $from, to: $to) {
            totalCommitContributions
            restrictedContributionsCount
            contributionCalendar {
              totalContributions
              weeks {
                contributionDays {
                  date
                  contributionCount
                }
              }
            }
          }
        }
      }
    ' -f username="$USERNAME" -f from="$from" -f to="$to" 2>/dev/null
}

# 現在期間のデータ
RESPONSE=$(get_period_data "$FROM_DATE" "${TODAY}T23:59:59Z") || {
    echo -e "エラー: データの取得に失敗しました"
    exit 1
}

# データ解析
PUBLIC_COMMITS=$(echo "$RESPONSE" | jq -r '.data.user.contributionsCollection.totalCommitContributions')
PRIVATE_TOTAL=$(echo "$RESPONSE" | jq -r '.data.user.contributionsCollection.restrictedContributionsCount // 0')
TOTAL_CONTRIBUTIONS=$(echo "$RESPONSE" | jq -r '.data.user.contributionsCollection.contributionCalendar.totalContributions')

# 公開のみモードの場合、プライベートを0にする
if [ "$PUBLIC_ONLY" = true ]; then
    PRIVATE_TOTAL=0
    TOTAL_CONTRIBUTIONS=$PUBLIC_COMMITS
fi

# 前期間のデータ（比較モードの場合）
if [ "$SHOW_DIFF" = true ]; then
    PREV_RESPONSE=$(get_period_data "$PREV_FROM_DATE" "$PREV_TO_DATE") || {
        echo -e "エラー: 前期間のデータ取得に失敗しました"
        SHOW_DIFF=false
    }
    
    if [ "$SHOW_DIFF" = true ]; then
        PREV_PUBLIC_COMMITS=$(echo "$PREV_RESPONSE" | jq -r '.data.user.contributionsCollection.totalCommitContributions')
        PREV_PRIVATE_TOTAL=$(echo "$PREV_RESPONSE" | jq -r '.data.user.contributionsCollection.restrictedContributionsCount // 0')
        PREV_TOTAL=$(echo "$PREV_RESPONSE" | jq -r '.data.user.contributionsCollection.contributionCalendar.totalContributions')
        
        # 公開のみモードの場合、前期間もプライベートを0にする
        if [ "$PUBLIC_ONLY" = true ]; then
            PREV_PRIVATE_TOTAL=0
            PREV_TOTAL=$PREV_PUBLIC_COMMITS
        fi
    fi
fi

# 差分計算と表示関数
format_diff() {
    local current=$1
    local previous=$2
    local diff=$((current - previous))
    local percent=0
    
    if [ "$previous" -gt 0 ]; then
        percent=$(( (diff * 100) / previous ))
    elif [ "$current" -gt 0 ]; then
        percent=100
    fi
    
    if [ "$diff" -gt 0 ]; then
        printf "${GREEN}+%-3d (+%d%%)${NC}" "$diff" "$percent"
    elif [ "$diff" -lt 0 ]; then
        printf "${RED}%-4d (%d%%)${NC}" "$diff" "$percent"
    else
        printf "    (±0%%)"
    fi
}

# レシート風出力
echo
echo "================================================"
echo "                                                "
echo "            GITHUB ACTIVITY RECEIPT             "
echo "                                                "
echo "================================================"
echo "  ${CURRENT_TIME}                    "
echo "  USER: @${USERNAME}                           "
echo "------------------------------------------------"
echo "                                                "

if [ "$SHOW_DIFF" = true ]; then
    printf "  %-22s %7s  %12s\n" "ITEM" "COUNT" "vs LAST"
    printf "  %-22s %7s  %12s\n" "----" "-----" "-------"
    printf "  %-22s %7d  " "COMMITS (PUBLIC)" "${PUBLIC_COMMITS}"
    format_diff "$PUBLIC_COMMITS" "$PREV_PUBLIC_COMMITS"
    echo
    if [ "$PUBLIC_ONLY" = false ]; then
        printf "  %-22s %7d  " "COMMITS (PRIVATE)" "${PRIVATE_TOTAL}"
        format_diff "$PRIVATE_TOTAL" "$PREV_PRIVATE_TOTAL"
        echo
    fi
    echo "                         ------- -------------"
    printf "  ${BOLD}%-22s %7d  " "TOTAL ACTIVITIES" "${TOTAL_CONTRIBUTIONS}"
    format_diff "$TOTAL_CONTRIBUTIONS" "$PREV_TOTAL"
    printf "${NC}\n"
else
    printf "  %-30s %10s\n" "COMMITS (PUBLIC)" "${PUBLIC_COMMITS}"
    if [ "$PUBLIC_ONLY" = false ]; then
        printf "  %-30s %10s\n" "COMMITS (PRIVATE)" "${PRIVATE_TOTAL}"
    fi
    echo "                                  ------------- "
    printf "  ${BOLD}%-30s %10s${NC}\n" "TOTAL ACTIVITIES" "${TOTAL_CONTRIBUTIONS}"
fi

echo "================================================"
echo "                                                "

# 週間サマリー（レシート風）
echo "  DAILY BREAKDOWN (LAST 7 DAYS)                "
echo "  -----------------------------                "

# 最後の7日分のデータを取得
DISPLAY_DAYS=$((DAYS > 7 ? 7 : DAYS))
echo "$RESPONSE" | jq -r '.data.user.contributionsCollection.contributionCalendar.weeks[-1].contributionDays[] | 
  "\(.date)|\(.contributionCount)"' | tail -${DISPLAY_DAYS} | {
    while IFS='|' read -r date count; do
        if [ -n "$date" ]; then
            # 日付フォーマット
            day_display=$(date -j -f "%Y-%m-%d" "$date" "+%m/%d %a" 2>/dev/null || date -d "$date" "+%m/%d %a")
            
            # 棒グラフ（レシート風に * で表現）
            if [ "$count" -gt 0 ]; then
                bar=$(printf '*%.0s' $(seq 1 $((count > 20 ? 20 : count))))
            else
                bar="-"
            fi
            
            printf "  %-10s [%-20s] %3d\n" "$day_display" "$bar" "$count"
        fi
    done
}

echo "                                                "

# 比較期間の表示
if [ "$SHOW_DIFF" = true ]; then
    echo "------------------------------------------------"
    case $DAYS in
        7)  echo "  COMPARISON: This week vs Last week" ;;
        30) echo "  COMPARISON: This month vs Last month" ;;
        365) echo "  COMPARISON: This year vs Last year" ;;
        *)  echo "  COMPARISON: Last ${DAYS} days vs Previous ${DAYS}" ;;
    esac
fi

echo "================================================"

# レシート番号とバーコード風
RECEIPT_NO=$(echo "${USERNAME}${DAYS}${TODAY}" | md5sum | cut -c1-12 | tr '[:lower:]' '[:upper:]')
echo "  NO: ${RECEIPT_NO}                             "
echo "                                                "
echo "  |||||| |||| | |||| ||| |||| ||||||| |||||||  "
echo "  ${RECEIPT_NO}                                  "
echo "                                                "
echo "================================================"
echo "         Thank you for your commits!            "
echo "            Have a productive day!              "
echo "================================================"
echo
echo -e "${DIM}Powered by gh-receipt${NC}"